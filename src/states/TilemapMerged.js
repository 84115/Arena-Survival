import Player from 'objects/Player';

export default class TilemapMergedState extends Phaser.State
{

    preload() {
        // this.game.load.tilemap('map', 'tile/omega-3.csv', null, Phaser.Tilemap.CSV);
        this.game.load.tilemap('map', null, '416,416,416,416,416,418,418,416,416,416,416,418,355,418,418,416,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1\n416,416,418,480,416,416,416,480,416,418,416,418,355,418,416,416,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1\n418,416,416,482,480,480,480,483,416,416,416,416,355,416,416,416,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1\n416,416,480,351,482,351,481,351,416,416,418,416,355,416,416,418,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1\n416,416,484,351,351,351,351,351,480,416,416,416,355,418,416,416,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1\n416,418,351,351,351,351,351,351,482,419,416,416,355,416,418,416,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1\n416,416,351,351,351,351,351,351,351,419,419,416,355,416,416,416,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1\n416,416,351,351,351,346,351,351,351,419,419,419,355,416,416,416,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1\n418,416,351,351,351,351,351,351,351,419,419,419,355,416,418,416,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1\n416,416,351,351,418,418,418,351,351,419,419,419,355,416,416,416,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1\n416,416,351,351,482,418,484,351,419,419,418,352,355,416,416,416,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1\n416,416,352,351,351,418,351,419,418,418,352,416,355,418,416,416,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1\n416,416,418,352,351,418,419,418,418,352,416,416,355,416,416,416,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1\n418,416,416,416,352,352,352,352,352,416,418,416,355,416,416,418,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1\n416,416,416,416,416,418,416,416,416,416,416,418,355,418,416,416,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1\n416,416,418,416,416,416,416,418,416,416,416,418,355,418,416,416,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1\n416,418,416,416,416,418,416,416,480,480,480,418,355,418,416,416,416,416,418,480,480,416,480,480,480,480,416,418,355,418,416,416\n416,416,416,416,416,1717,1718,1719,1720,481,482,418,355,418,1726,1727,416,480,480,484,480,416,416,480,482,351,480,418,355,418,416,416\n416,416,418,416,416,351,1782,351,351,351,351,351,355,351,351,351,351,481,351,351,482,416,480,351,351,351,351,482,355,416,418,416\n416,416,1842,1843,1844,351,351,351,351,351,351,351,355,351,351,351,351,351,351,351,351,416,484,351,351,351,351,351,355,481,416,416\n416,416,416,416,351,351,351,351,351,351,351,351,355,351,351,351,351,351,351,351,351,416,351,351,351,351,351,351,355,351,482,416\n416,481,1970,1971,351,351,351,353,353,351,353,352,352,352,352,352,352,352,351,351,351,480,351,351,351,351,351,351,351,351,351,416\n416,351,481,483,351,351,351,351,351,351,351,2043,2044,418,416,416,418,484,351,351,351,418,351,351,351,351,351,351,351,351,351,416\n480,351,351,351,351,351,351,351,351,351,351,484,483,416,416,416,416,351,351,351,353,353,351,351,351,351,351,351,351,351,351,416\n481,351,351,351,351,351,352,352,351,351,351,351,351,2173,418,416,416,351,351,351,351,351,351,351,351,351,351,351,353,351,351,418\n351,351,351,351,351,418,416,416,351,351,351,351,351,2237,484,416,416,351,351,351,351,351,351,351,351,351,351,351,351,351,351,416\n353,351,351,351,418,352,416,416,2296,351,351,351,351,419,419,416,418,352,351,351,351,351,351,351,351,353,351,351,351,351,351,416\n351,351,351,418,2356,2357,416,416,416,418,351,351,351,419,419,416,416,416,351,351,351,351,353,351,351,351,351,351,351,351,351,416\n351,351,418,352,351,351,416,418,416,2425,356,356,356,352,352,416,416,418,351,353,351,351,351,351,351,351,351,351,351,351,356,416\n351,351,352,416,356,356,418,416,353,416,420,420,420,416,418,416,416,416,356,356,356,356,356,356,356,356,356,351,351,356,420,416\n352,352,416,418,352,352,416,416,416,416,352,352,352,352,416,416,416,416,416,420,420,420,420,420,420,420,420,356,356,420,420,416\n416,416,416,416,416,416,416,416,416,416,416,416,416,416,416,416,480,480,480,418,420,420,420,420,420,420,420,420,420,420,420,416', Phaser.Tilemap.CSV);
        this.game.load.image('tiles', 'tile/omega.png');
    }

    create()
    {
        //  Because we're loading CSV map data we have to specify the tile size here or we can't render it
        this.map = this.game.add.tilemap('map', 32, 32);
        window.map = this.map;
        //  Now add in the tileset
        this.map.addTilesetImage('tiles');

        //  Create our layer
        this.layer = this.map.createLayer(0);

        //  Resize the world
        this.layer.resizeWorld();

        // this.layer.debug = true;

        this.map.setCollisionByExclusion([351, 355, 356, 420], true);

        this.player = new Player(this.game, 0, 3000, 'dude_sheet');
        this.player.body.maxVelocity.y = 390;

        this.game.camera.follow(this.player, Phaser.Camera.FOLLOW_PLATFORMER);

        // this.map.setTileIndexCallback(26, hitCoin, this);

        // this.game.input.onDown.addOnce(function() {
        //     console.log(this.map);
        //     this.map.replace(419, 351);
        //     // this.map.removeTile(9, 5, this.layer).destroy();
        // }, this);
    }

    update()
    {
        this.game.physics.arcade.collide(this.player, this.layer);

        this.game.physics.arcade.overlap(this.player, this.layer, function(a,b) {
            if (b.index == 355) {
                a.body.gravity.y = 200;
                a.body.maxVelocity.y = 5000;
            }
            else {
                a.body.gravity.y = 500;
                a.body.maxVelocity.y = 390;
            }

            console.log(b.index, a.body.maxVelocity.y);
        });

        this.game.physics.arcade.collide(this.player.weapon.bullets, this.layer);
    }

}
